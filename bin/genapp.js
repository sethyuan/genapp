#!/usr/bin/env node
/*** Generated by streamline 0.10.0 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb,__trap=__rt.__trap,__tryCatch=__rt.__tryCatch,__forIn=__rt.__forIn; (function main(_) { var fgen, fs, fs_, path, readline, nomnom, argv, options, configFile, bundles, bundle, contextFolder, subroot, contextFile, context, question, constructContext, rl, realContext, k, gen; var __frame = { name: "main", line: 1 }; return __func(_, this, arguments, main, 0, __frame, function __$main() {
    fgen = require("fgen");
    fs = require("fs");
    fs_ = require("../lib/fs_.js");
    path = require("path");
    readline = require("readline");
    nomnom = require("nomnom");

































    argv = nomnom.script("gen").options({ bundle: { position: 0, help: "Bundle used for generation" }, sub: { position: 1, list: true, help: "Sub-bundles within bundle and sub-bundles" }, output: { abbr: "o", default: "./", metavar: "DIR", help: "A destination folder where you want to generate to" }, list: { abbr: "l", flag: true, help: "Lists sub-bundles of a bundle/sub-bundle" }, version: { abbr: "V", flag: true, callback: function() { return ("genapp " + require("../package.json").version); }, help: "Show version" } }).parse();


    options = {
      roots: [path.join(__dirname, "../bundles"),] };


    configFile = path.join((process.env.HOME || process.env.USERPROFILE), ".genappconfig");





    return fs_.exists(configFile, __cb(_, __frame, 53, 4, function ___A(__0, __6) { return (function __$main(__then) { if (__6) {

          return fs.readFile(configFile, "utf8", __cb(_, __frame, 55, 15, function ___A(__0, __7) { options.roots = JSON.parse(__7).roots.map(function(root) {

              return root.replace(/^~/, (process.env.HOME || process.env.USERPROFILE));

            }).concat(options.roots); __then(); }, true)); } else { __then(); } ; })(function __$main() {



        bundles = { };
        return options.roots.forEach_(__cb(_, __frame, 64, 0, function __$main() {














          if ((!argv.bundle && argv.list)) {
            Object.keys(bundles).forEach(function(bundle) {
              console.log(bundle); });

            console.log();
            process.exit(0); } ;



          if (!argv.bundle) {
            console.log(nomnom.getUsage());
            process.exit(1); } ;


          bundle = argv.bundle;


          if (!bundles[bundle]) {
            if (/^__/.test(bundle)) {
              console.log("Bundle names cannot start with '__', please choose a different name."); } else {
              if ((bundle.charAt(0) === ".")) {
                console.log("Bundle names cannot start with '.', please choose a different name."); }
               else {
                console.log(("Bundle '%s' does not exist in your current roots configuration.\n\n" + "Your current roots are:"), bundle);

                options.roots.forEach(function(root) {
                  console.log(root); }); } ; } ;


            process.exit(1); } ;



          argv._.forEach(function(bundle, i) {
            if ((i === 0)) { return };
            if (/^__/.test(bundle)) {
              console.log("Bundle names cannot start with '__', please choose a different name.");
              process.exit(1); }
             else if ((bundle.charAt(0) === ".")) {
              console.log("Bundle names cannot start with '.', please choose a different name.");
              process.exit(1); }  ; });



          contextFolder = path.join(bundles[bundle], argv._.join("/___/"));


          return fs_.exists(contextFolder, __cb(_, __frame, 126, 5, function ___A(__0, __9) { var __8 = !__9; return (function __$main(__then) { if (__8) {
                console.log("Bundle '%s' does not exist in root '%s'.", argv._.join(" "), bundles[bundle]);

                process.exit(1); __then(); } else { __then(); } ; })(function __$main() { return (function __$main(__then) {


                if (argv.list) {
                  subroot = path.join(contextFolder, "___");
                  return fs_.exists(subroot, __cb(_, __frame, 134, 6, function ___A(__0, __10) { return (function __$main(__then) { if (__10) {
                        return fs.readdir(subroot, __cb(_, __frame, 135, 4, function ___A(__0, __11) {
                          return __11.filter_(__cb(_, __frame, 136, 4, function ___A(__0, __12) { __12.forEach(function(folder) {





                              console.log(folder); }); __then(); }, true), -1, function __2(_, file) { var __frame = { name: "__2", line: 137 }; return __func(_, this, arguments, __2, 0, __frame, function __$__2() { return (function __$__2(_) { return (function __$__2(_) { return fs.stat(path.join(subroot, file), __cb(_, __frame, 1, 15, function ___A(__0, __3) { var __2 = __3.isDirectory(); var __4 = !__2; return (function __$__2(__then) { if (__4) { var __5 = __2; return _(null, __5); } else { __then(); } ; })(function __$__2() { return _(null, (file.charAt(0) !== ".")); }); }, true)); })(__cb(_, __frame, -136, 20, function ___A(__0, __1) { var __3 = !__1; return (function __$__2(__then) { if (__3) { var __4 = __1; return _(null, __4); } else { __then(); } ; })(function __$__2() { return _(null, !/^__/.test(file)); }); }, true)); })(__cb(_, __frame, -136, 20, function ___A(__0, __2) { return _(null, __2); }, true)); }); }); }, true)); } else { __then(); } ; })(function __$main() {


                      console.log();
                      process.exit(0); __then(); }); }, true)); } else { __then(); } ; })(function __$main() {


                contextFile = path.join(contextFolder, "..", (argv._[(argv._.length - 1)] + ".js")); return (function ___A(__then) { (function ___A(_) { __tryCatch(_, function __$main() {



                      context = require(contextFile); __then(); }); })(function ___A(e, __result) { __tryCatch(_, function __$main() { if (e) {

                        console.log("Cannot read bundle '%s' context file.\n\n%s", argv._.join("/___/"), e);

                        process.exit(1); __then(); } else { _(null, __result); } ; }); }); })(function ___A() { __tryCatch(_, function __$main() {


                    question = function(query, callback) {
                      rl.question(query, function(answer) { callback(null, answer); }); };


                    constructContext = function constructContext__3(key, val, ctx, prefix, _) { var more, item, k, answer, number; var __frame = { name: "constructContext__3", line: 165 }; return __func(_, this, arguments, constructContext__3, 4, __frame, function __$constructContext__3() { return (function __$constructContext__3(__then) {
                          if (Array.isArray(val)) {
                            more = true;
                            ctx[key] = [];
                            console.log("ctrl+c to quit '%s'", key);
                            rl.once("SIGINT", function() {
                              more = false;
                              rl.write(null, { ctrl: true, name: "u" });
                              rl.write(null, { ctrl: true, name: "k" });
                              rl.write("\n"); }); return (function ___A(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$constructContext__3() { __more = false;

                                var __8 = more; if (__8) {
                                  item = { };
                                  ctx[key].push(item);
                                  var __1 = __forIn(val[0]); var __2 = 0; return (function ___A(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$constructContext__3() { __more = false; var __9 = (__2 < __1.length); if (__9) { k = __1[__2++];
                                        return constructContext(k, val[0][k], item, (key + "> "), __cb(_, __frame, 15, 8, function __$constructContext__3() { while (__more) { __loop(); }; __more = true; }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$constructContext__3() { while (__more) { __loop(); }; __more = true; }); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$constructContext__3() {


                              ctx[key].length--; __then(); }); } else { return (function __$constructContext__3(__then) {
                              if ((typeof val === "function")) {
                                ctx[key] = val; __then(); } else { return (function __$constructContext__3(__then) {
                                  if (((typeof val === "object") && (val != null))) {
                                    item = { };
                                    ctx[key] = item;
                                    var __3 = __forIn(val); var __4 = 0; return (function ___A(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$constructContext__3() { __more = false; var __11 = (__4 < __3.length); if (__11) { k = __3[__4++];
                                          return constructContext(k, val[k], item, (key + "> "), __cb(_, __frame, 25, 6, function __$constructContext__3() { while (__more) { __loop(); }; __more = true; }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(__then); } else { return (function __$constructContext__3(__then) {

                                      if ((val != null)) { return (function __$constructContext__3(__break) {
                                          switch (typeof val) {
                                          case "string": return question(((prefix + key) + "? "), __cb(_, __frame, 30, 19, function ___A(__0, __5) {
                                              answer = __5; ctx[key] = answer;
                                              return __break(); }, true));

                                          case "number": return question(((prefix + key) + "? (number) "), __cb(_, __frame, 34, 19, function ___A(__0, __6) {
                                              answer = __6; number = parseInt(answer);
                                              return (function __$constructContext__3(__then) { if (isNaN(number)) {
                                                  console.log("It's not number.");
                                                  return constructContext(key, val, ctx, prefix, __cb(_, __frame, 38, 8, __then, true));
                                                } else { ctx[key] = number;

                                                  __then(); } ; })(__break); }, true));


                                          case "boolean": return question(((prefix + key) + "? (yes/no) "), __cb(_, __frame, 44, 19, function ___A(__0, __7) {
                                              answer = __7.toLowerCase(); return (function __$constructContext__3(__then) { if (((answer === "yes") || (answer === "y"))) {
                                                  ctx[key] = true;
                                                  __then(); } else { return (function __$constructContext__3(__then) { if (((answer === "no") || (answer === "n"))) {
                                                      ctx[key] = false;
                                                      __then(); } else { console.log("yes or no please.");

                                                      return constructContext(key, val, ctx, prefix, __cb(_, __frame, 51, 8, __then, true));
                                                    } ; })(__then); } ; })(__break); }, true)); default: return __break(); }; })(__then); } else { __then(); } ; })(__then); } ; })(__then); } ; })(__then); } ; })(_); }); };






                    rl = readline.createInterface({
                      input: process.stdin,
                      output: process.stdout });


                    realContext = { };
                    var __4 = __forIn(context.context); var __5 = 0; return (function ___A(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$main() { __more = false; var __21 = (__5 < __4.length); if (__21) { k = __4[__5++];
                          return constructContext(k, context.context[k], realContext, "", __cb(_, __frame, 229, 2, function __$main() { while (__more) { __loop(); }; __more = true; }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$main() {

                      rl.close(); return (function __$main(__then) {
                        if ((typeof context.postProcess === "function")) {
                          return context.postProcess(realContext, __cb(_, __frame, 233, 2, __then, true)); } else { __then(); } ; })(function __$main() { return (function ___A(__then) { (function ___A(_) { __tryCatch(_, function __$main() {






                              return (function(cb) { fgen.createGenerator(contextFolder, function(generator) { cb(null, generator); }); })(__cb(_, __frame, 240, 12, function ___A(__0, __13) { gen = __13;
                                gen.context = realContext;
                                return gen.generateAll(argv.output, function(k) {
                                  return !/^___(\/|\\)/.test(k); }, __cb(_, __frame, 242, 2, function __$main() {

                                  console.log("done."); __then(); }, true)); }, true)); }); })(function ___A(e, __result) { __tryCatch(_, function __$main() { if (e) {

                                console.log();
                                console.log(e.message); __then(); } else { _(null, __result); } ; }); }); })(function ___A() { __tryCatch(_, _); }); }); }); }); }); }); }); }, true)); }, true), function __1(_, root) { var __frame = { name: "__1", line: 65 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return fs_.exists(root, __cb(_, __frame, 1, 6, function ___A(__0, __2) { return (function __$__1(__then) { if (__2) { return fs.readdir(root, __cb(_, __frame, 2, 11, function ___A(__0, __4) { return __4.filter_(__cb(_, __frame, 3, 11, function ___A(__0, __5) { var __3 = __5.forEach(function(folder) { if (!bundles[folder]) { bundles[folder] = root; }; }); return _(null, __3); }, true), -1, function __1(_, file) { var __frame = { name: "__1", line: 68 }; return __func(_, this, arguments, __1, 0, __frame, function __$__1() { return (function __$__1(_) { return (function __$__1(_) { return fs.stat(path.join(root, file), __cb(_, __frame, 1, 15, function ___A(__0, __3) { var __2 = __3.isDirectory(); var __4 = !__2; return (function __$__1(__then) { if (__4) { var __5 = __2; return _(null, __5); } else { __then(); } ; })(function __$__1() { return _(null, (file.charAt(0) !== ".")); }); }, true)); })(__cb(_, __frame, -67, 20, function ___A(__0, __1) { var __3 = !__1; return (function __$__1(__then) { if (__3) { var __4 = __1; return _(null, __4); } else { __then(); } ; })(function __$__1() { return _(null, !/^__/.test(file)); }); }, true)); })(__cb(_, __frame, -67, 20, function ___A(__0, __2) { return _(null, __2); }, true)); }); }); }, true)); } else { __then(); } ; })(_); }, true)); }); }); }); }, true)); });}).call(this, __trap);